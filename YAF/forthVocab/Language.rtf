{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgray\c100000;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 // -- ForthTry\
\
: msg() ( args -- ? )\
	\{ msg \}	// compiles into this\
: msg: ( target params -- )\
	\{ params target msg: \}\
: msg1:msg2: ( target param1 param2 \}\
	\{ target param1 param2 msg1:msg2: \}\
; ( taget1 msg1: ( target2 msg2: param1 msg3() ) msg4: param4 ) msg5()\
	\{ target1 target2 param1 msg3() msg2: msg1: param4 msg4:  msg5() \}\
\
\
: CHARACTER 1 CONSTANT ;\
: INTEGER 4 CONSTANT ;\
: POINTER 4 CONSTANT ;\
: VARIABLE \
: ARRAY\
CHARACTER 256 ARRAY tib\
INTEGER VARIABLE state\
POINTER VARIABLE token\
: @\
: == \
: strLength() ( addr -- length )\
: tokenize: ( addr char -- )\
: set: ( addr value -- )\
: true 1 CONSTANT ;\
: accept: ( addr length -- ) 	//reads counted string\
: while: ( condBlock bodyBlock -- )\
: if: ( condBlock bodyBlock -- )\
: if:else ( condBlock trueBlock falseBlock -- )\
: parseToken() ( char -- strAddr )\
: find() ( strAddr -- wordAddr bool )\
: flags() ( wordAddr -- flags )\
: parseNumber() ( strAddr -- number bool )\
: dup()\
: swap()\
: TOS\
: compileTOS()\
: evaluate()\
: compileFailed()\
: compileLiteral()\
: abort()\
0\
32\
256\
\
tib set: 0\
token set: tib\
state set: 0\
\
: interpret\
	[ true ] while: [\
		[ token strLength() == 0 ] if: [\
			tib accept: 256\
			tib tokenize: 32\
			token set: tib\
		]\
		[ token @ find() ] if: [					// wordAddr\
			[ dup() flags() == state @ ] if: [		// wordAddr\
				TOS compileTOS()					// -\
			] else: [\
				TOS evaluate()						// -\
			]\
		] else: [								// wordAddr\
			[ parseNumber() ] if: [				// number\
				[ state @ ] if: [					// number\
					compileFailed()\
				]\
				drop()\
				abort()\
			] else: [								// number\
				[ state @ ] if: [					// number\
					compileLiteral()				// -\
				]\
			]\
		]\
		token set: ( ( token @ ) + strLength() )\
	]\
;\
\
\
tib 0 set: \
token tib set:\
state 0 set:\
: interpretPostfix\
	[ true ] \
	[\
		[ token strLength() 0 == ] \
		[\
			tib 256 accept: \
			tib 32 tokenize: \
			token tib set: \
		] \
		if: \
\
		[ token @ find() ] \
		[									// wordAddr\
			[ dup() flags() state @ == ] \
			[ compileTOS() ] \
			[ evaluate() ]\
			if:else:\
		] \
		[									// wordAddr\
			[ parseNumber() ] \
			[								// number\
				[ state @ ] \
				[ compileFailed() ]\
				if:\
				drop()\
				abort()\
			] \
			[								// number\
				[ state @ ]\
				[ compileLiteral() ]\
				if:\
			]\
			if:else:\
		]\
		if:else:\
\
		token \
		token @ strLength() +\
		set: \
	] \
	while:\
;\
\
\
\
\
\
}