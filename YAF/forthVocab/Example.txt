//


: CCells ( ndx -- size ) ;
: ICells 2 * ;
: LCells 4 * ;
: WCells 4 * ;
: CArray < ( <type size> -- array )
: IArray < ( <type size> -- array )
  ICells Array ; IMMEDIATE
: LArray < ( <type size> -- array )
: WArray < ( <type size> -- array )




: c@				// 4 myarray c@
: c=				// someValue 4 myarray c=
: @
: =
: l@
: l=
: w@
: w=


: nextTokenFromInput ( charArray -- )

:

CHARACTER 4 Array myArray
someValue myArray 3 [] c=
myArray 3 cells + c@ .

CHARACTER Variable myChar
someValue myChar c=
myChar c@ .

: [] ( arrayAddr ndx -- itemAddr )


( Outer interpreter )

CHARACTER 256 Array inputBuffer

:whiletrue()
:systemRunning
:c@
:inputBuffer
:isNumber()
:ifElse()
:parseNumber()
:findWord()
:dup()
:execute()
:drop()
:"
:emit

: OuterInterp
	whileTrue()
	[ systemRunning c@ ]
	[
		inputBuffer readToken()
		inputBuffer c@ isNumber() ifElse()
		[
			inputBuffer parseNumber()
		]
		[
			( not a mumber, so it must be a word )
			inputBuffer findWord() dup()
			ifElse()
			[
				execute()
			]
			[
				drop() " ?" emit()
			]
		]
	]
;

// A code block [ code ] always pushes itself on the stack when it is executed by the
// interpreter as a thread. The "execute" word will actually execute the blocks contents

switch case [ condition ] [ action ] case [ condition ] [ action ] endswitch
[ condition ] if [ action ]
[ condition ] [ action ] if

[ condition ] if: [ action1 ] else:

// [ condition ] ifTrue: [ action1] ifFalse: [ action2 ]
[ condition ] [ action1 ] [ action2 ] if:else:()

// [ condition ] whiletrue: [ action ]
[ condition ] [ action ] whileTrue:()

// [ condition ] repeatUntilFalse: [ action ]
[ condition ] [ action ] repeatUntilFalse:()

// start to: finish do: [ action ]
start finish [ action ] to:do:()





