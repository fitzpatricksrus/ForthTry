//



words should know how many paramters they take and how many values
they return.  That way we can make stack frames and make reasonable
temp variables on the stack if needed.


// http://www.murphywong.net/hello/simple.htm#L10

: CCells ( ndx -- size ) ;
: ICells 2 * ;
: LCells 4 * ;
: WCells 4 * ;
: CArray < ( <type size> -- array )
: IArray < ( <type size> -- array )
  ICells Array ; IMMEDIATE
: LArray < ( <type size> -- array )
: WArray < ( <type size> -- array )




: c@				// 4 myarray c@
: c=				// someValue 4 myarray c=
: @
: =
: l@
: l=
: w@
: w=


: nextTokenFromInput ( charArray -- )

:

CHARACTER 4 Array myArray
someValue myArray 3 [] c=
myArray 3 cells + c@ .

CHARACTER Variable myChar
someValue myChar c=
myChar c@ .


// A code block [ code ] always pushes itself on the stack when it is executed by the
// interpreter as a thread. The "execute" word will actually execute the blocks contents

switch case [ condition ] [ action ] case [ condition ] [ action ] endswitch
[ condition ] if [ action ]
[ condition ] [ action ] if

[ condition ] if: [ action1 ] else:

// [ condition ] ifTrue: [ action1] ifFalse: [ action2 ]
[ condition ] [ action1 ] [ action2 ] if:else:()

// [ condition ] whiletrue: [ action ]
[ condition ] [ action ] whileTrue:()

// [ condition ] repeatUntilFalse: [ action ]
[ condition ] [ action ] repeatUntilFalse:()

// start to: finish do: [ action ]
start finish [ action ] to:do:()

// ---------------------------------------------------
// input routines
: readCharExt()
	( read a character from external input )
	primative ### ;
: c@
: c!
: ==
: pick ( a0 .. an n -- a0 .. an a0 )
: roll ( a0 .. an n -- a1 .. an a0 )
: return
: drop
: while:

: dup  0 pick ;
: over 1 pick ;
: swap 1 roll ;
: rot  2 roll ;
: nip  ( a b -- b )       swap drop ;
: -rot ( a b c -- c a b ) rot rot ;
: tuck ( a b -- b a b )   dup -rot ;
: over ( a b -- a b a )   swap tuck ;
: TOS ;
: false 0 ;
: true 1 ;
: if:else:		( condition trueBlk falseBlk )
	2 pick		( condition trueBlk falseBlk condition )
	execute		( condition trueBlk falseBlk bool )
	pick		( condition trueBlk falseBlk blk )
	3 roll		( blk condition trueBlk falseBlk )
	2drop drop	( blk )
	execute()	( ? )
;
: if: [] if:else: ;
: not [ TOS ] if: [ false ] else: [ true ]
: != == not ;
: 2dup 1 pick 1 pick ;
: 1+ 1 + ;
: 2drop drop drop ;
: asBool() [ TOS 0 != ] if: [ true ] else: [ false ]

: charInString() ( char string -- bool )
	( search a string to see if it contains the specified character )
	[ dup c@ asBool() ] while: [	( char string )
		[ 2dup c@ == ] if: [		( char string )
		  swap						( string char )
		  drop						( string )
		  return					( string )
		] else: [
		  1+						( char string+1 )
		]
	]
	2drop							( )
	false							( false )
;

: charNotInString() ( char string -- bool )
	( search a string to see if it contains the specified character )
	charInString() not
;

: popReverseString() ( 0...char addr -- )
	( pop a string off the stack to a buffer )
	[ over asBool() ] while: [
		2dup
		c!
		1+
	]
	2drop
;

: readCharExtUntil ( stringOfStopCharacters inputBuffer -- stopChar )
	( fill the input buffer with characters until a stop character is reached )
	[ readCharExt()						( ssc ib char )
		dup								( ssc ib char char )
		2 pick							( ssc ib char char ssc )
		charInString() not				( ssc ib char bool )
	] while: [							( ssc ib char )
		over							( ssc ib char ib )
		c!								( ssc ib )
		1+								( ssc ib+1 )
	]									( ssc ib char )
	swap								( ssc char ib )
	0 swap c!							( ssc char )
	swap drop							( char )
;

CHARACTER 256 ARRAY TOKEN_SEPERATORS ( characters that signal end of token - all control chars, space, adn delete )
	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 222 23 24 25 26 27 28 29 30 31 32 127 TOKEN_SEPERATORS popReverseString()

CHARACTER 256 ARRAY extInputBuffer
INTEGER VARIABLE extInputPosition 0 extInputPosition !
: nextExtInputChar ( -- char )
	( return the next character in extInputBuffer, filling the buffer if needed)
CHARACTER 256 ARRAY tokenBuffer
: currentToken ( -- addr )
	( return a pointer to the current token )
: nextToken ( - addr )
	( read a new token from the input stream and return a pointer to it )

// ---------------------------------------------------

( Outer interpreter )


: return
	primative ### ;

: @
	primative ### ;

: !  ( vaule addr -- )
	primative ### ;

: c@
	primative ### ;

: c!  ( vaule addr -- )
	primative ### ;

: execute()
	primative ### ;

: pick()
	primative ### ;

: rot()
	primative ### ;

: dup()
	0 pick() ;

: over()
	1 pick() ;

: drop()
	primative ### ;
: 2Drop()
	drop() drop();
: 3Drop()
	2Drop() drop();

: emitChar() ( char -- )
	primative ### ;

: readChar() ( -- char ) ( read a character from external input )
	primative ### ;

: [
	primative ### ;

: whileTrue:
	primative ### ;

: if:else:
	primative ### ;


: CHARACTER 1 ;

: Array

: Variable

: readUntilCharacter() ( buffer char -- )
	[ readChar() 2dup != ] whileTrue:
	[				( buffer char inputChar -- )
		rot()		( char inputChar buffer )
		2dup		( char inputChar buffer inputChar buffer )
		c! 1+		( char inputChar buffer )
		rot()		( inputChar buffer char )
		rot()		( buffer char inputChar )
		drop()		( buffer char )
	] ( buffer char inputChar -- )
	3drop();
	inputBuffer 0 c!	( zero terminate token )
;

: (
	[ readChar() 41 != ] whileTrue: [ ] ( 41 is a right paren )
;

: isNumberChar() ( char -- bool )
	[ [ dup 0 >= ] or: [ dup 9 <=] ] if: [
		drop()
		1
	] else: [
		drop()
		0
	]
;

: parseNumber()	( inputBuffer -- value )
	0									( inputBuffer 0)
	[ over() c@ ] whileTrue: [			( inputBuffer value )
		over() c@ 48 -	+				( inputBuffer value )
		swap 1+ swap					( inputBuffer+1 value)
	]
; ( inputBuffer+n value )

: findWord()

: currentToken()
: nextToken()


: " ( inputBufferAddr -- )
	34 readUntilCharacter() ( 34 is a quoate character)
;

: emit() ( stringAddr -- )
	[ dup c@ 0 != ]	whileTrue: [	( is current character a string terminator, 0x00? )
		dup c@ emitChar()			( emit the character )
		1 +							( move the pointer to the next character )
	]
;

CHARACTER Variable systemRunning
CHARACTER 256 Array inputBuffer

: OuterInterp
	[ systemRunning c@ ] whileTrue: [
		inputBuffer readToken()
		[ inputBuffer c@ isNumberChar() ] if: [
			inputBuffer parseNumber()
		] else: [
			( not a mumber, so it must be a word )
			[ inputBuffer findWord() dup() ] if: [
				execute()
			] else: [
				drop()
				" ?" emit()
			]
		]
	]
;


// -- ForthTry

: msg() ( args -- ? )
	{ msg }	// compiles into this
: msg: ( target params -- )
	{ params target msg: }
: msg1:msg2: ( target param1 param2 }
	{ target param1 param2 msg1:msg2: }
; ( taget1 msg1: ( target2 msg2: param1 msg3() ) msg4: param4 ) msg5()
	{ target1 target2 param1 msg3() msg2: msg1: param4 msg4:  msg5() }

tib
tib.position
state
token
@
: strLength()
: set: ( addr value -- )
: true ( -- 1 )
: accept: ( addr length -- ) 	//reads counted string
: while: ( condBlock bodyBlock -- )
: if: ( condBlock bodyBlock -- )
: if:else ( condBlock trueBlock falseBlock -- )
: parseToken() ( char -- strAddr )
: find() ( strAddr -- wordAddr bool )
: flags() ( wordAddr -- flags )
: parseNumber() ( strAddr -- number bool )
: dup()
: swap()
: TOS
: compileTOS()
: evaluate()
: compileFailed()
: compileLiteral()
: abort()
0
32
256

: interpret
	[ true ] while: [
		[ token strLength() == 0 ] if: [
			tib accept: 256
			tib tokenize: 32
			token set: tib
		]
		[ token find() ] if: [					// wordAddr
			[ dup() flags() == state @ ] if: [		// wordAddr
				TOS compileTOS()					// -
			] else: [
				TOS evaluate()						// -
			]
		] else: [								// wordAddr
			[ parseNumber() ] if: [				// number
				[ state @ ] if: [					// number
					compileFailed()
				]
				drop()
				abort()
			] else: [								// number
				[ state @ ] if: [					// number
					compileLiteral()				// -
				]
			]
		]
		token set: ( token + strLength() )
	]
;

: interpret
	[ true ]											( -- true )
	[													( -- )
		[ tib.length @ tib.position @ == ]					( bool )
		[													( -- )
			tib 50 accept()										( length )
			tib.length !										( )
			0 tib.position !									( )
		]													( -- )
		if:												( bool -- )

		[												( )
			32 word											( -- addr )
			find											( addr -- word flag )
			dup												( word flag -- word flag flag )
		]
		[												( word flag -- )
			[ state @ == ]									( word flag -- word )
			[
				compileTOS()
			]											()
			[
				evaluate()
			]
			if:else:									( flag -- )
		]
		[
			[ dup rot count >number ]
			[
				[ state @ ]
				[
					( last @ dup @ last ! dp ! )
					compileFailed()
				]
				if:
				abort()
			]
			[
				drop() drop()
				[ state @ ]
				[ ['] lit , , ]
				if:
			]
			if:else:
		]
		if:else:
	]
	while :
;


// -- Forth

: interpret
	begin
		#tib @ >in @ =
		if
			tib 50 accept #tib ! 0 >in !
		then
		32 word find dup
		if
			state @ =
			if
				,
			else
				execute
			then
		else
			dup rot count >number
			if
				state @
				if
					last @ dup @ last ! dp !
				then
				abort
			then
			drop drop state @
			if
				['] lit , ,
			then
		then
	again
;

// -- C

: interpret
	do {
		if (inputPos == tib.length) {					//	#tib @ >in @ =
			accept(tib, 50);							//	tib 50 accept #tib ! 0 >in !
			inputPos = 0;
		}
		String tokenString = word(tib, inputPos, 32);	// 32 word find dup
		Token token = find(tokenString);
		if (token != null) {
			if (currentMode == token.getMode()) {		// state @ =
				compile(token);
			} else {
				execute(token);
			}
		} else {
			if (!token.isNumber()) {					// dup rot count >number
				if	(currentMode == COMPILE_MODE) {		// state @
					compileFailed();					// last @ dup @ last ! dp !
				}
				abort();
			}
														// drop drop
			if (currentMode == COMPILE_MODE) {			// state @
				compileLiternalNumber(token);			// ['] lit , ,
			} else {
				push(token.asNumber());
			}
		then
	} while (true);
;






