//


// http://www.murphywong.net/hello/simple.htm#L10

: CCells ( ndx -- size ) ;
: ICells 2 * ;
: LCells 4 * ;
: WCells 4 * ;
: CArray < ( <type size> -- array )
: IArray < ( <type size> -- array )
  ICells Array ; IMMEDIATE
: LArray < ( <type size> -- array )
: WArray < ( <type size> -- array )




: c@				// 4 myarray c@
: c=				// someValue 4 myarray c=
: @
: =
: l@
: l=
: w@
: w=


: nextTokenFromInput ( charArray -- )

:

CHARACTER 4 Array myArray
someValue myArray 3 [] c=
myArray 3 cells + c@ .

CHARACTER Variable myChar
someValue myChar c=
myChar c@ .


// A code block [ code ] always pushes itself on the stack when it is executed by the
// interpreter as a thread. The "execute" word will actually execute the blocks contents

switch case [ condition ] [ action ] case [ condition ] [ action ] endswitch
[ condition ] if [ action ]
[ condition ] [ action ] if

[ condition ] if: [ action1 ] else:

// [ condition ] ifTrue: [ action1] ifFalse: [ action2 ]
[ condition ] [ action1 ] [ action2 ] if:else:()

// [ condition ] whiletrue: [ action ]
[ condition ] [ action ] whileTrue:()

// [ condition ] repeatUntilFalse: [ action ]
[ condition ] [ action ] repeatUntilFalse:()

// start to: finish do: [ action ]
start finish [ action ] to:do:()

// ---------------------------------------------------

( Outer interpreter )


: @
	primative ### ;

: !  ( vaule addr -- )
	primative ### ;

: c@
	primative ### ;

: c!  ( vaule addr -- )
	primative ### ;

: execute()
	primative ### ;

: pick()
	primative ### ;

: rot()
	primative ### ;

: dup()
	0 pick() ;

: over()
	1 pick() ;

: drop()
	primative ### ;
: 2Drop()
	drop() drop();
: 3Drop()
	2Drop() drop();

: emitChar() ( char -- )
	primative ### ;

: readChar() ( -- char )
	primative ### ;

: [
	primative ### ;

: whileTrue:
	primative ### ;

: if:else:
	primative ### ;


: CHARACTER 1 ;

: Array

: Variable

: readUntilCharacter() ( buffer char -- )
	[ readChar() 2dup != ] whileTrue:
	[				( buffer char inputChar -- )
		rot()		( char inputChar buffer )
		2dup		( char inputChar buffer inputChar buffer )
		c! 1+		( char inputChar buffer )
		rot()		( inputChar buffer char )
		rot()		( buffer char inputChar )
		drop()		( buffer char )
	] ( buffer char inputChar -- )
	3drop();
;

: (
	[ readChar() 41 != ] whileTrue: [ ] ( 41 is a right paren )
;

: isNumberChar() ( char -- bool )
	[ [ dup 0 >= ] or: [ dup 9 <=] ] if: [
		drop()
		1
	] else: [
		drop()
		0
	]
;

: parseNumber()	( inputBuffer -- value )
	0
	[ inputBuffer c@ ] whileTrue: [		( inputBuffer value )
		inputBuffer c@ 48 -	+			( inputBuffer value )
		swap 1+ swap
	]
;

: findWord()

: readToken()


: " ( inputBufferAddr -- )
	34 readUntilCharacter() ( 34 is a quoate character)
;

: emit() ( stringAddr -- )
	[ dup c@ 0 != ]	whileTrue: [		( is current character a string terminator, 0x00? )
		dup c@ emitChar()		( emit the character )
		1 +						( move the pointer to the next character )
	]
;

CHARACTER Variable systemRunning
CHARACTER 256 Array inputBuffer

: OuterInterp
	[ systemRunning c@ ] whileTrue: [
		inputBuffer readToken()
		[ inputBuffer c@ isNumberChar() ] if: [
			inputBuffer parseNumber()
		] else: [
			( not a mumber, so it must be a word )
			[ inputBuffer findWord() dup() ] if: [
				execute()
			] else: [
				drop()
				" ?" emit()
			]
		]
	]
;





